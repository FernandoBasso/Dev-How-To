#+Title: rot13 Algorithm in Ruby
#+PROPERTY: header-args :results none :exports both
#+SETUPFILE: ~/Projects/proghowto/org-setup.org

* rotate 13

https://www.hackerrank.com/challenges/ruby-enumerable-collect

https://en.wikipedia.org/wiki/ROT13

** Solution 1

This is the more procedural, dumb version.

#+begin_src ruby
def rot13(secret_messages)
  alphabet = [*('A'..'Z'), *('a'..'z')]
  rotated = [*('N'..'Z'), *('A'..'M'),  *('n'..'z'), *('a'..'m')]

  secret_messages.map do |msg|
    msg.split('').map do |elem|
      idx = alphabet.find_index(elem)
      idx ? rotated[idx] : ' '
    end.join('').strip
  end
end
#+end_src

** Solution 2

Uses ranges with splat to generate the list of strings. Totally unnecessary.

#+begin_src ruby
def rot13(secret_msgs)
  alphabet = [*('A'..'Z'), *('a'..'z')].join('')
  rotated = [*('N'..'Z'), *('A'..'M'), *('n'..'z'), *('a'..'m')].join('')
  secret_msgs.map { |msg| msg.tr(rotated, alphabet) }
end
#+end_src


** Solution 3

This is probably the best solution.

#+begin_src ruby
def rot13(secret_msgs)
  secret_msgs.map { |msg| msg.tr('A-Za-z', 'N-ZA-Mn-za-m') }
end
#+end_src

