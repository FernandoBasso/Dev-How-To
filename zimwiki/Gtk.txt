Content-Type: text/x-zim-wiki
Wiki-Format: zim 0.6
Creation-Date: 2019-12-28T08:22:02-03:00

====== Gtk ======
Created Saturday 28 December 2019



* Gtk 3 Getting Started Tutorial in C ([[https://developer.gnome.org/gtk3/stable/gtk-getting-started.html|link]])
* Compiling Gtk Stuff ([[https://developer.gnome.org/gtk3/stable/gtk-compiling.html|link]])
* Application ID like org.gtk.memoapp, how to choose an ID‽ ([[https://wiki.gnome.org/HowDoI/ChooseApplicationID|link]])
* Some conventions on naming stuff: ([[https://developer.gnome.org/gobject/stable/gtype-conventions.html|link]])
* [[https://developer.gnome.org/gobject/stable/pt02.html|GObject Tutorial (shared by ebassi)]]
* Gtk/Gnome [[https://developer.gnome.org/programming-guidelines/stable/c-coding-style.html.en|C Coding Style Guidelines]].
* [[https://people.gnome.org/~swilmet/glib-gtk-dev-platform.pdf|Gtk and Glib Dev Platform]] PDF book by Sebástien Wilmet.
* [[https://developer.gnome.org/gtk4/3.98/migrating.html|Migration to Gtk 4 Guide]]
* Custom Widgets with Gtk 4, [[https://blog.gtk.org/2020/04/23/custom-widgets-in-gtk-4-introduction/|part 1]], [[https://blog.gtk.org/2020/04/24/custom-widgets-in-gtk-4-drawing/|part 2]], [[https://blog.gtk.org/2020/04/27/custom-widgets-in-gtk-4-layout/|part 3]].
* [[https://discourse.gnome.org/t/useful-documentation-for-gtk/29|Useful documentation for GTK (ebassi)]]

“There are two different kinds of tree in GLib; GTree is your basic balanced binary tree, useful to store key-value pairs sorted by key; GNode stores arbitrary tree-structured data, such as a parse tree or taxonomy.” -- p. 24, Sebástien Wilmet.

===== gint, gchar, etc =====
an old message from ebassi: The reason why gint/gdouble/gchar exist is because the original authors of gtk/glib needed the same highlighting on emacs

{{./gtk-gint-gchar.png}}


===== Random notes =====

The ''activate'' signal is sent when the application is launched with ''g_application_run()''.

Declare a ''GtkWidget *window'' but instantiate it to a window with ''window = gtk_application_window_new (app);''. When using ''window'', we have to cast it from ''GtkWidget'' to ''GtkWindow'' using the macro ''GTK_WINDOW''.

According to mclasen@gtk riot/irc, these casts and are mainly habit. Nothing especial. Could have declared as ''GtkWindow *window'' in the first place (instead of ''GtkWidget *window'').

===== g_signal_connect() vs g_signal_connect_swapped() =====

Reast last paragraph of [[https://developer.gnome.org/gtk3/stable/gtk-getting-started.html|this link]]. Then, in devhelp, read about ''g_signal_connect_swapped()''.

""
''g_signal_connect_swapped()'' allows you to specify what the callback function should take as parameter by letting you pass it as data. In this case the function being called back is ''gtk_widget_destroy()'' and the window pointer is passed to it. This has the effect that when the button is clicked, the whole GTK window is destroyed. In contrast if a normal ''g_signal_connect()'' were used to connect the "clicked" signal with ''gtk_widget_destroy()'', then the button itself would have been destroyed, not the window.
""

===== Compile Gresources =====

'''
$ glib-compile-resources \
    myapp.gresource.xml \
    --target=resources.c \
    --generate-source
'''

With meson, something like this in ''meson.build'':

'''
gnome = import('gnome')

expl1_resources = gnome.compile_resources(
  'expl1_resources',
  'myapp.gresource.xml',
  source_dir: '.'
)
'''


===== gsettings gschema =====

See [[https://askubuntu.com/questions/251712/how-can-i-install-a-gsettings-schema-without-root-privileges|this]].

Compile and save in a directory without needing root access:

'''
$ glib-compile-schemas .
# or
$ glib-compile-schemas ~/.my-gschemas
'''

Then load it as you develop the app:

'''
$ GSETTINGS_SCHEMA_DIR=./ ./build/myapp
# or
$ GSETTINGS_SHEMA_DIR=~/.my-gschemas/ ./build/myapp
'''


===== Gtk4 =====

* [[https://developer.gnome.org/gtk4/stable/gtk-building.html|Compiling the GTK Libraries]]

