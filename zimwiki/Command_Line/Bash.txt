Content-Type: text/x-zim-wiki
Wiki-Format: zim 0.6
Creation-Date: 2020-04-05T16:16:08-03:00

====== Bash ======
Created Sunday 05 April 2020

http://mywiki.wooledge.org/ THE BEST BASH STUFF EVER!

https://github.com/progrium/bashstyle

https://soptik.tech/articles/beware-of-shell-globs.html


===== Re-evaluate functions in PS1 =====

https://askubuntu.com/questions/651871/why-is-my-function-not-re-evaluated-in-ps1

http://www.tldp.org/HOWTO/Bash-Prompt-HOWTO/x279.html

'''
PS1="\n${blue}\$(curdir) ${cyan}[node:\$(version_node)] $(git_info)\n${normal}$ "
'''

The backslash protects the contents of ‘$()‘ from immediate shell interpretation, so ‘curdir’ and ‘version_node’ are called every time a prompt is generated (after each command).


===== return vs exit =====

* See ''return'' under [[https://www.gnu.org/software/bash/manual/bash.html#Bourne-Shell-Builtins|Bourne Shell Builtins]].

===== multiline commands =====

'''
$ rsync -aiv \
  --exclude-from=sync-excl.list \
  . \
  /mnt/Disk25GB/Project-X
'''

But before running the final ''Enter'', you realise your command is wrong and edit it in the ''$EDITOR'' with ''C-x C-e''. When you save the editor and quit, the command runs, but you are left in “''>''” (PS2) because that is where you where when you started editing, and hitting ''Enter'' to exit PS2 causes the same command to run again. Or cancel with ''C-c''.

I guess for these lengthier command which I am bound to make mistakes/want to edit, it is perhaphs better to start in the editor from the start with ''C-x C-e''.

* [[https://superuser.com/questions/409150/how-do-i-edit-previous-lines-in-a-multiple-line-command-in-bash|How do I edit previous lines in a multiple line command in Bash?]]
* [[https://vi.stackexchange.com/questions/12547/vi-editing-of-bash-command-line-avoid-execution-upon-exit|vi editing of bash command line: Avoid execution upon exit?]]

