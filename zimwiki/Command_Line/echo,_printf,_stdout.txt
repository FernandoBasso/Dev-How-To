Content-Type: text/x-zim-wiki
Wiki-Format: zim 0.4
Creation-Date: 2018-05-21T13:25:34-03:00

====== echo, printf, stdout ======
Created Monday 21 May 2018

===== newline with echo and printf =====

NOTE:
{{./help-echo.png}}


''echo'' adds a newline to the end of the thing being echoed.

'''
----
$ echo 'foo\nbar'
foo\nbar
$ echo "foo\nbar"
foo\nbar
$
----
'''

Using single or double quotes, ''echo'' does not (by default) honor '\n' and other escape sequences, but it inserts a newline at the end of the output.

On the other hand, ''printf'' honors escape sequences inside either single or double quotes, and it does not append a newline to the output:
'''

$ printf 'foo\nbar'
foo
bar$ printf "foo\nbar"
foo
bar$
'''

See how "bar" was printed and immediately the shell prompt "$" symbol appears? With ''printf'', any desired newline must be explicitly specified:
'''

$ printf 'foo\nbar\n'
foo
bar
$ printf "foo\nbar\n"
foo
bar
$
'''

When using ''printf'', to literally print two chars that form an escape sequence, escape the backslash with another backslash:
'''

$ printf 'foo\\nbar\\n'
foo\nbar\n$
'''

And to make ''echo'' understand escape sequences, use the option ''-e'':
'''

$ echo -e 'foo\nbar'
foo
bar
$
'''

And we didn't use an ''\n'' at the end of the string because echo does that for us, unless we use the ''-n'' option:
'''

$ echo -n 'Lara'
Lara$
'''

The prompt symbol immediately followed the output because ''-n'' caused ''echo'' to not automatically append a newline to the end of the output.











