Content-Type: text/x-zim-wiki
Wiki-Format: zim 0.4
Creation-Date: 2020-02-05T16:13:11-03:00

====== ch08 Recursion ======
Created Wednesday 05 February 2020

Recursion is defining a function in terms of itself via self-referential expressions. It expresses indefinite or incremental computations without explicit repetetion. The data being computed decides when the computation is done.

Y combinator, a.k.a. fixed-point combinator, for recursive functions in the labmda calculus.

===== Factorial =====

Recursion is self-referential composition. (George Makrydakis)

===== Bottom =====

In logic, ⊥ corresponds to false. Examples of bottom in Haskell are programs which return an error, programs which never terminate (infinite recursion/loop), partial functions returning error for non-handled cases.

‘Nothing’, from ‘Maybe’, is a way to say that there is no result or data from the function without hitting bottom.

===== Integral division from scratch =====

'''
--
-- Division in terms of counting number of
-- possible subtractions.
--
divby :: Integer -> Integer -> (Integer, Integer)
divby num denom = go num denom 0
  where go n d acc
          | n < d = (acc, n)
          | otherwise = go (n - d) d (acc + 1)

-- λ> divby 8 2
-- (4,0)
-- λ> divby 11 4
-- (2,3)
'''


divby :: Dividend -> Divisor -> (Quotient, Remainder)
divby dividend divisor = go dividend divisor 0
  where go dd dv cnt
		  | dd < dv = (cnt, dd)
		  | otherwise = go (dd - dv) dv (cnt + 1)

NOTE: Could not find (so far) a solution for ‘dividedBy’ which correctly returns nevagive quotient and remainder when necessary. All solutions I have found have some flaw or another.

https://www.inf.unibz.it/~calvanese/teaching/05-06-ip/lecture-notes/uni11/index.html

https://www.reddit.com/r/HaskellBook/comments/4xmgrp/ch8_fixing_dividedby/

https://gitlab.com/texts-bridleiva/haskellbook-solutions/-/blob/master/ch08/Recursion.hs






===== The End =====

