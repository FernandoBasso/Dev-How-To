Content-Type: text/x-zim-wiki
Wiki-Format: zim 0.6
Creation-Date: 2020-08-15T20:02:48-03:00

====== TypeScript ======
Created Saturday 15 August 2020

* [[https://www.youtube.com/watch?v=wD5WGkOEJRs|Busy TypeScript Developer’s Guide to Advanced TypeScript | Ted Neward]]
* [[https://www.freecodecamp.org/news/typescript-curry-ramda-types-f747e99744ab/|How to master advanced TypeScript patterns]] by Pierre-Antoine Mills
* [[https://rangle.io/blog/how-to-use-typescript-type-guards/|How to get the types you want with TypeScript type guards]]. Has a cool example of ''isOfType'' generic type guard.
* https://fettblog.eu/advanced-typescript-guide/#typescript-and-javascript

* [[https://basarat.gitbook.io/typescript/type-system/migrating|JS Migration Guide]] — Cool Tips, type and module declartions, *.css, *.html, etc.

* [[https://2ality.com/2018/04/type-notation-typescript.html#type-variables-and-generic-types|Parameter Types vs Generic Types (2ality)]]

Setting “noUnusedLocals” in tsconfig.json does NOT make VSCode or Vim + coc-deno and coc-tsserver disable those warnigns.

There is a vscode setting “report style and checking as warnings”, but turning it off produces errors instead (of disabling the warnings).

From inside vim, trying ''CocLocalConfig'' and setting ''"deno.tsconfig": "/path/to/proj/tsconfig.json"'' seems not to work unless I run '':CocInstall coc-deno'' again. Even '':CocRestart'' or closing/opening Vim again doesn't work.

Vim/VSCode may complain about “deno.ns” in the ''lib'' key, but ''deno run -c tsconfig.json'' makes use of it correctly.

'''
{
  "compilerOptions": {
    "lib": ["es2020", "dom", "deno.ns"]
  }
}
'''


It is possible to add "target": "es2015" to tsconfig.json and run deno without -c and let it use the defaults, or provide a different config file. This is useful for Vim + coc-tsserver + coc-deno to not complain about some stuff, but then run deno with its own set of configs.

Basarat [[https://basarat.gitbook.io/typescript/project/modules/external-modules#clarification-commonjs-amd-es-modules-others|recommends]]:

{
  "module": "commonjs",
  "moduleResolution": "Node"
}


===== Lazy Loading =====

Important notes [[https://basarat.gitbook.io/typescript/project/modules/external-modules#use-case-lazy-loading|here]].

===== Dynamic import() =====

'''
// index.ts
export default app;

// home.spec.ts
import request from 'supertest';
let app: Express;
beforeEach(async () => {
  app = await import('src/index');
});

it('should work', () => {
  const result = await request(app.default);
  expect(result.body).toEqual({ message: 'Hello World' });
});
'''

Note the use of **app.default**. See [[https://javascript.info/modules-dynamic-imports#the-import-expression|this]].



===== Types and Interfaces =====

Class and Interface with the same name (see [[https://github.com/microsoft/TypeScript/issues/9699|this]]):

“Declaring an interface with the same name as a class is how you add methods to the class without implementing them (this is an important feature for some mix-in scenarios and other cases where non-TS code adds methods to classes).”
 

===== typeof vs instanceof =====

Use typeof with primitive value:
typeof number, string, boolean, symbol

Use instanceof with other values that are crated with a constructor function:

typeof Array, Person, RegExp


===== Classes =====

If an implementation of an abstract class uses a getter, the abstract class defines that getter as a simple property.

'''
abstract class Sorter {
  public abstract length: number;
}

class Numbers {
  public constructor(public data: Array<number>) {}

  public get length(): number {
    return this.data.length;
  }
}
'''







