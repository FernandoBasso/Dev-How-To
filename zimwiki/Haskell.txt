Content-Type: text/x-zim-wiki
Wiki-Format: zim 0.4
Creation-Date: 2020-01-23T10:31:25-03:00

====== Haskell ======
Created Thursday 23 January 2020

https://www.fpcomplete.com/blog/2012/09/ten-things-you-should-know-about-haskell-syntax


===== Alien and Haskell =====

--------------------


{{./alien-haskell.png?height=320}}

Finalmente entendi o file Alien.

Ash: You still don't understand what you're dealing with do you? Perfect organism. It's structural perfection is matched only by its hostility.”

Lambert: You admire it.

Ash: I admire its purity. A survivor, unclouded by conscience, remorse, or delusions of morality.

Ele claramente estava se referindo a linguagem Haskell.

--------------------


Informação de Serviço

Data: Quarta, 12 de Fevereiro de 2020.

Tempo: # Faça valer a pena.

Esse é um dia novinho em folha, completo com 24 horas de oportunidades, escohas e prazeres. Um perfeito conjunto de 1440 minutos.

Esse presente único não pode ser trocado, substituído ou estornado. Use-o com cuidado. Faça o melhor uso dele. Limitado a uma unidade por consumidor.


shapr@haskell-beginners, irc
https://www.youtube.com/watch?v=gMDiKOuwLXw

===== prompt =====

'''
:set prompt "\n\027[31mλ>\027[0m "
'''



===== GHCi plain REPL vs haskell-mode REPL =====

In a terminal, with a plain GHCi REPL, I'm able to print functions data types that DO NOT have an instance of ‘Show’.

'''
data Thing = Foo Bar
'''

Note it does not derive ‘Show’. Then, in the haskell-mode repl, I can just output the value of the data cosntructor, and also the resulting function from partial applications.

'''
λ> Foo
Foo :: FooBar
λ> Bar
Bar :: FooBar
λ> (+) 1
(+) 1 :: Num a => a -> a
'''

Explicit ‘print’ does not work, though:

'''
λ> print Bar

<interactive>:24:1-9: error:
    • No instance for (Show FooBar) arising from a use of ‘print’
    • In the expression: print Bar
      In an equation for ‘it’: it = print Bar
'''



