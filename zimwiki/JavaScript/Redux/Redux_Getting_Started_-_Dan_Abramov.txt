Content-Type: text/x-zim-wiki
Wiki-Format: zim 0.4
Creation-Date: 2019-12-24T15:54:01-03:00

====== Redux Getting Started - Dan Abramov ======
Created Tuesday 24 December 2019

https://egghead.io/courses/getting-started-with-redux

See the director ''javascript/redux-getting-started-abramov/'' for the full source code.

30 lessons.

===== Three principles of Redux =====

https://redux.js.org/introduction/three-principles/

* Single source of truth
* State is read-only
* Changes are made with pure functions


===== 01 Redux: The Single Immutable State Tree =====
[[https://egghead.io/lessons/react-redux-the-single-immutable-state-tree|Video Lesson 1]]

Single Immutable State Tree, a.k.a “__Single Source Of Truth__.”

The whole state of the application is represented with a single (plain) JS object. Every state change is explicit and can be tracked.

Everything that changes in the application, whether the data and/or the UI state, is contained in the single object called the State (or The State Tree).


===== 02 Redux: Describing State Changes with Actions =====
[[https://egghead.io/lessons/react-redux-describing-state-changes-with-actions|Video Lesson 2]]

Cannot mutate the state and the State Tree directly. To change the state, an action needs to be dispatched.

An action is a plain js object describing the change.

The state is the minimum representation of the data in the app.

The action is the minimum representation of the change to the data.

The action //must// have a ''type'' property which is not undefined.


===== 03 Redux: Pure and Impure Functions =====
[[https://egghead.io/lessons/react-redux-pure-and-impure-functions|Video Lesson 3]]

If you accidentaly mutate the state tree, redux cannot detect a change has ocurred. Redux compares objects references, not values.


===== 04 Redux: The Reducer Function =====
[[https://egghead.io/lessons/react-redux-the-reducer-function|Video Lesson 4]]

The state mutation needs to be described as a pure function that takes the previous state and the action being dispatched and returns the next state of the application. This function is called “the reducer.”

===== 05 Redux: Writing a Counter Reducer with Tests =====
[[https://egghead.io/lessons/react-redux-writing-a-counter-reducer-with-tests|Video Lesson 5]]

When the action type is not provided, or it is unknown, the reducer should return the state unchanged. Not even a copy of it, but the same reference to the State Tree Object so it intentionally //does not// cause a state change. If we returned a copy of the object, it is a new reference, and it would cause redux to perceive it as a state change (because ''{} !== {}'' is true).

The reducer also has to specify the default initial state if it is not provided.

===== 06 Redux: Store Methods: getState(), dispatch(), and subscribe() =====
[[https://egghead.io/lessons/react-redux-store-methods-getstate-dispatch-and-subscribe|Video Lesson 6]]

* ''getState()''
* ''dispatch()''
* ''subscribe()''


===== 07 Redux: Implementing Store from Scratch =====

[[https://egghead.io/lessons/react-redux-implementing-store-from-scratch|Video Lesson 7]]

Nice cool JavaScript stuff! Worth it by that reason alone, besides the nice view into ''createStore()''. Very instructive.


===== 08 Redux: React Counter Example =====

[[https://egghead.io/lessons/react-redux-react-counter-example|Video Lesson 8]]




https://egghead.io/lessons/react-redux-avoiding-array-mutations-with-concat-slice-and-spread




https://egghead.io/lessons/react-redux-avoiding-object-mutations-with-object-assign-and-spread




https://egghead.io/lessons/react-redux-writing-a-todo-list-reducer-adding-a-todo




https://egghead.io/lessons/react-redux-writing-a-todo-list-reducer-toggling-a-todo




https://egghead.io/lessons/react-redux-reducer-composition-with-arrays




https://egghead.io/lessons/react-redux-reducer-composition-with-objects




https://egghead.io/lessons/react-redux-reducer-composition-with-combinereducers




https://egghead.io/lessons/react-redux-implementing-combinereducers-from-scratch




https://egghead.io/lessons/react-redux-react-todo-list-example-adding-a-todo




https://egghead.io/lessons/react-redux-react-todo-list-example-toggling-a-todo




https://egghead.io/lessons/react-redux-react-todo-list-example-filtering-todos




https://egghead.io/lessons/react-redux-extracting-presentational-components-todo-todolist




https://egghead.io/lessons/react-redux-extracting-presentational-components-addtodo-footer-filterlink




https://egghead.io/lessons/react-redux-extracting-container-components-filterlink




https://egghead.io/lessons/react-redux-extracting-container-components-visibletodolist-addtodo




https://egghead.io/lessons/react-redux-passing-the-store-down-explicitly-via-props




https://egghead.io/lessons/react-redux-passing-the-store-down-implicitly-via-context




https://egghead.io/lessons/react-redux-passing-the-store-down-with-provider-from-react-redux




https://egghead.io/lessons/react-redux-generating-containers-with-connect-from-react-redux-visibletodolist




https://egghead.io/lessons/react-redux-generating-containers-with-connect-from-react-redux-addtodo




https://egghead.io/lessons/react-redux-generating-containers-with-connect-from-react-redux-footerlink




https://egghead.io/lessons/react-redux-extracting-action-creators














