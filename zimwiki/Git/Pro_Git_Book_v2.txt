Content-Type: text/x-zim-wiki
Wiki-Format: zim 0.4
Creation-Date: 2020-03-25T08:47:53-03:00

====== Pro Git Book ======
Created Wednesday 25 March 2020

===== Getting Started =====

Other systems (CVS, Subversion, Perforce, Bazaar, and so on) think of the information they store as a set of files and the changes made to each file over time (this is commonly described as delta-based version control).

Git thinks of its data more like a series of snapshots of a miniature filesystem. With Git, every time you commit, or save the state of your project, Git basically takes a picture of what all your files look like at that moment and stores a reference to that snapshot. To be efficient, if files have not changed, Git doesn’t store the file again, just a link to the previous identical file it has already stored. Git thinks about its data more like a stream of snapshots.

SHA-1 hash, 40-char long hex string

Git stores everything in its database not by file name but by the hash value of its contents.

* working tree
* staging area (the index)
* .git/ directory (repository)


‘git config --system’: ‘/etc/gitconfig’ needs admin.

‘git config --global’: ‘~/.gitconfig’.

‘git config --local’: ‘./.git/config’, local to the current project.


===== 2.2 Git Basics - Recording Changes to the Repository =====
git status --short

git status --help
search: --short
search: Short Format

git diff
git diff --staged

git diff --name-only | xargs npx eslint

git commit (uses EDITOR env var)
git commit -v
git commit --message

git commit -a

git rm <file> (remove from git, will not be further tracked)

git rm --cached (remove from stage but keep in working tree)

git rm log/\*.log (git has its own filename expansion)
git rm \*~

git mv foo.txt bar.txt

===== 2.3 Git Basics - Viewing the Commit History =====




