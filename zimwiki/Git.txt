Content-Type: text/x-zim-wiki
Wiki-Format: zim 0.4
Creation-Date: 2020-03-13T16:19:53-03:00

====== Git ======
Created Friday 13 March 2020

* [[https://www.vogella.com/tutorials/Git/article.html|Vogella Git Tutorial]]
* [[http://www.paulboxley.com/blog/2011/06/git-caret-and-tilde|Git Caret and Tild]]
* [[https://stackoverflow.com/questions/2221658/whats-the-difference-between-head-and-head-in-git|What's the difference between HEAD^ and HEAD~ in Git?]]
* [[https://stackoverflow.com/questions/2304087/what-is-head-in-git|What is HEAD?]]
* [[https://stackoverflow.com/questions/2221658/whats-the-difference-between-head-and-head-in-git|HEAD^ and HEAD~ (caret vs tilde)]]
* [[https://mirrors.edge.kernel.org/pub/software/scm/git/docs/gitrevisions.html|Git Revisions Mini Language Docs]] — Got that link after reading “[[https://stackoverflow.com/questions/19474577/what-does-the-argument-u-mean-in-git|What does the argument @{u} mean in Git?]]”.
* [[http://marklodato.github.io/visual-git-guide/index-en.html|A Visual Git Reference]]



===== Commit Message =====
https://chris.beams.io/posts/git-commit/

https://www.mantisbt.org/wiki/doku.php/mantisbt:git_commit_messages

https://git.kernel.org/pub/scm/git/git.git/tree/Documentation/SubmittingPatches?id=928f0ab4bae61954c27a77794d80c2332c8e816c

https://stackoverflow.com/questions/13861318/why-is-it-considered-good-practice-to-describe-git-commits-in-the-present-tense/13861351#13861351


https://stackoverflow.com/questions/8741290/tagging-commit-messages-and-changesets

https://docs.scipy.org/doc/numpy-1.15.1/dev/gitwash/development_workflow.html



===== rebase continue then skip? =====

Sometimes we fix a rebase conflict, run ‘git rebase --continue’, and then git says the fixes were applied, but remains in the dirty state ‘my-branch REBASE N/M’. It happens when fixing the conflict causes the incoming (the local) changes to be ignored. That is, the conflict happened, and handling it removes all the stuff that was present in the incoming/local changes in such a way that it would become an empty commit. Therefore, we can just do ‘git rebase --skip’ and be done with it.


===== diff whitespace =====
https://stackoverflow.com/questions/5257553/coloring-white-space-in-git-diffs-output

git diff -R
git diff -W

https://git-scm.com/docs/git-config#Documentation/git-config.txt-corewhitespace

‘-R’: Swap two inputs; that is, show differences from index or on-disk file to tree contents.

‘-W’, ‘--function-context’: Show whole surrounding functions of changes.

'''
git config --global color.diff.whitespace 'red reverse'
'''


===== Upstream =====

This git message:

'''
$ git push -u origin
fatal: The current branch tasks/XYZ-1234 has no upstream branch.
To push the current branch and set the remote as upstream, use

    git push --set-upstream origin tasks/XYZ-1234
'''

But I don't want to type that tedious ''tasks/XYZ-1234'' numberish thing. We can do:

'''
$ git push --set-upstream origin HEAD
'''

https://stackoverflow.com/questions/14031970/git-push-current-branch-shortcut


===== Lint only staged files =====

'''
git diff --name-only --staged | xargs npx eslint
'''


===== log =====

'''
$ git log --graph --format="%C(auto) %h %s" origin/dev1-global
'''


===== Interactive Rebase =====

* [[https://stackoverflow.com/questions/29094595/git-interactive-rebase-without-opening-the-editor|Git interactive ]][[https://stackoverflow.com/questions/29094595/git-interactive-rebase-without-opening-the-editor|rebase]][[https://stackoverflow.com/questions/29094595/git-interactive-rebase-without-opening-the-editor| without opening the editor]] (I no longer, as of 2020 on Arch Linux, have ''git--rebase--interactive'' shell script mentioned in the answer.)


'''
$ GIT_SEQUENCE_EDITOR='sed -i 5s/pick/squash/' git rebase -i
'''

